# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

# Load historical stock price data (e.g., from a CSV file)
# Replace 'your_data.csv' with the actual data file
data = pd.read_csv('your_data.csv')

# Assuming you have a column named 'Date' and 'Close' for stock prices
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Plot the historical stock price data
plt.figure(figsize=(16, 8))
plt.title('Stock Price History')
plt.plot(data['Close'])
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.show()

# Use the 'Close' column for prediction
dataset = data['Close'].values
dataset = dataset.reshape(-1, 1)

# Normalize the data between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

# Split the data into training and testing sets (e.g., 80% training, 20% testing)
train_data_len = int(np.ceil( len(scaled_data) * .8 ))
train_data = scaled_data[0:int(train_data_len), :]

# Create sequences of data for training (e.g., using the last 60 days' data to predict the next day)
x_train = []
y_train = []

for i in range(60,len(train_data)):
    x_train.append(train_data[i-60:i,0])
    y_train.append(train_data[i,0])

x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data for LSTM (samples, time steps, features)
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Test data set
test_data = scaled_data[train_data_len - 60:, :]

x_test = []
y_test = dataset[train_data_len:, :]
for i in range(60,len(test_data)):
    x_test.append(test_data[i-60:i,0])

x_test = np.array(x_test)

# Reshape the data for LSTM
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

# Get predictions
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Calculate RMSE (Root Mean Squared Error)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
print('RMSE:', rmse)

# Plot the data
train = data[:train_data_len]
valid = data[train_data_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# You can use this trained model to predict future stock prices as well
